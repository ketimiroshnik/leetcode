# 1004. Max Consecutive Ones III

class Solution(object):
    def longestOnes(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int

        Идея решения:
        мы линейно идем по массиву правой границей окна
        размер окна - это всегда наибольший найденный ответ на текущий момент
        если count <= k, то это валидное окно и в этом случае мы расширяем размер окна (так как не двигаем левый указатель)
        если count > k то сейчас у нас не валидный ответ и потому для этого right мы двигаем вправо и left, сохраняя размер окна

        то есть на очередном шаге мы двигаем правую границу, сохраняя положение левой границы
        и если с кол-вом нулей все ок, то радуемся жизни так как мы расширили размер окна
        иначе тащим за собой и левой конец, упсссс невалидная ситуация ничего не поделать

        в целом когда мы таким образом двигаем окно, то мы как бы проверяем текущий отрезок
        на соответсвие кол-ва нулей, если он не соответствует, то нам это
        неинтереснр так как эта область никак не может дать нам ответ лучше найденного
        если же ситуация валидна то это отлично и мы далее пытаемся расширить это окно
        """

        left = 0
        count = 0
        for right in range(len(nums)):
            if nums[right] == 0:
                count += 1
            if count > k:
                count -= (nums[left] == 0)
                left += 1
        return len(nums) - left




